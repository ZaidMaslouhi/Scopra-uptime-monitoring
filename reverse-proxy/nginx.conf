
events {
    # Number of worker processes can be adjusted based on the system's capabilities
    worker_connections 1024;
}

http {
    # MIME types and default charset
    include mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Logging configuration
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Upstream backend servers
    upstream user_service {
        server user-service:8001;
    }

    upstream project_service {
        server project-service:8002;
    }

    upstream monitor_service {
        server monitor-service:8003;
    }

    # HTTP server configuration
    server {
        listen 8000;
        server_name "nginx";

        # Location for static files
        # location /static/ {
        #     alias /path/to/static/files/;
        # }

        # Reverse proxy configuration for user service
        location /user/ {
            proxy_pass http://user_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Rate limit requests to 10 requests per second
            limit_req zone=user_service burst=10 nodelay;
        }

        # Reverse proxy configuration for project service
        location /project/ {
            proxy_pass http://project_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Rate limit requests to 10 requests per second
            limit_req zone=user_service burst=10 nodelay;
        }
        
        # Reverse proxy configuration for monitor service
        location /monitor/ {
            proxy_pass http://monitor_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Rate limit requests to 10 requests per second
            limit_req zone=user_service burst=10 nodelay;
        }
    }
}
